<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>可执行的动态库/Executable shared object</title>
    <link href="/2022/01/%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%9A%84%E5%8A%A8%E6%80%81%E5%BA%93/"/>
    <url>/2022/01/%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%9A%84%E5%8A%A8%E6%80%81%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>参考资料: <a href="https://unix.stackexchange.com/questions/223385/why-and-how-are-some-shared-libraries-runnable-as-though-they-are-executables">https://unix.stackexchange.com/questions/223385/why-and-how-are-some-shared-libraries-runnable-as-though-they-are-executables</a><br><code>hello.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">say_hello</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *message)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!message)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, %s\n&quot;</span>, message);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br>    say_hello(argv[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>main.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">say_hello</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *message)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br>    say_hello(argv[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">[shao@esxi-centos7 <span class="hljs-built_in">test</span>]$ gcc -fPIC -pie -o libhello.so hello.c -Wl,-E<br>[shao@esxi-centos7 <span class="hljs-built_in">test</span>]$ readelf -h libhello.so<br>ELF Header:<br>  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00<br>  Class:                             ELF64<br>  Data:                              2<span class="hljs-string">&#x27;s complement, little endian</span><br><span class="hljs-string">  Version:                           1 (current)</span><br><span class="hljs-string">  OS/ABI:                            UNIX - System V</span><br><span class="hljs-string">  ABI Version:                       0</span><br><span class="hljs-string">  Type:                              DYN (Shared object file)</span><br><span class="hljs-string">  Machine:                           Advanced Micro Devices X86-64</span><br><span class="hljs-string">  Version:                           0x1</span><br><span class="hljs-string">  Entry point address:               0x7f0</span><br><span class="hljs-string">  Start of program headers:          64 (bytes into file)</span><br><span class="hljs-string">  Start of section headers:          6744 (bytes into file)</span><br><span class="hljs-string">  Flags:                             0x0</span><br><span class="hljs-string">  Size of this header:               64 (bytes)</span><br><span class="hljs-string">  Size of program headers:           56 (bytes)</span><br><span class="hljs-string">  Number of program headers:         9</span><br><span class="hljs-string">  Size of section headers:           64 (bytes)</span><br><span class="hljs-string">  Number of section headers:         31</span><br><span class="hljs-string">  Section header string table index: 30</span><br><span class="hljs-string">[shao@esxi-centos7 test]$ ./libhello.so</span><br><span class="hljs-string">Hello, ./libhello.so</span><br><span class="hljs-string">[shao@esxi-centos7 test]$ export LD_LIBRARY_PATH=./</span><br><span class="hljs-string">[shao@esxi-centos7 test]$ gcc -o main main.c -L. -lhello</span><br><span class="hljs-string">[shao@esxi-centos7 test]$ ./main</span><br><span class="hljs-string">Hello, ./main</span><br><span class="hljs-string">[shao@esxi-centos7 test]$</span><br></code></pre></td></tr></table></figure><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>参考资料:<br><a href="https://stackoverflow.com/questions/31484785/how-to-make-a-linux-shared-object-library-runnable-on-its-own">https://stackoverflow.com/questions/31484785/how-to-make-a-linux-shared-object-library-runnable-on-its-own</a><br><a href="https://web.archive.org/web/20170324131308/programmersdelight.com/2015/07/30/hello-libc/">https://web.archive.org/web/20170324131308/programmersdelight.com/2015/07/30/hello-libc/</a></p><p><code>hello.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">say_hello</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *message)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!message)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, %s\n&quot;</span>, message);<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> interp_path[] __attribute__((section(<span class="hljs-string">&quot;.interp&quot;</span>))) = <span class="hljs-string">&quot;/lib64/ld-linux-x86-64.so.2&quot;</span>;<br><br><span class="hljs-comment">/* 入口函数入参不能用，argc和argv不正确</span><br><span class="hljs-comment">int hello_main(int argc, char *argv[]) &#123;</span><br><span class="hljs-comment">    printf(&quot;argc = %d\n&quot;, argc);</span><br><span class="hljs-comment">    say_hello(&quot;test&quot;);</span><br><span class="hljs-comment">    exit(0);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">[shao@esxi-centos7 test]$ gcc -shared -fPIC -Wl,-e,hello_main -o libhello.so hello.c</span><br><span class="hljs-comment">[shao@esxi-centos7 test]$ ./libhello.so</span><br><span class="hljs-comment">argc = -290389592</span><br><span class="hljs-comment">Hello, test</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">hello_main</span><span class="hljs-params">()</span> </span>&#123;<br>    say_hello(<span class="hljs-string">&quot;test&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>main.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">say_hello</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *message)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br>    say_hello(argv[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[shao@esxi-centos7 <span class="hljs-built_in">test</span>]$ gcc -shared -fPIC -Wl,-e,hello_main -o libhello.so hello.c<br>[shao@esxi-centos7 <span class="hljs-built_in">test</span>]$ ./libhello.so<br>Hello, <span class="hljs-built_in">test</span><br>[shao@esxi-centos7 <span class="hljs-built_in">test</span>]$ <span class="hljs-built_in">export</span> LD_LIBRARY_PATH=./<br>[shao@esxi-centos7 <span class="hljs-built_in">test</span>]$ gcc -o main main.c -L. -lhello<br>[shao@esxi-centos7 <span class="hljs-built_in">test</span>]$ ./main<br>Hello, ./main<br>[shao@esxi-centos7 <span class="hljs-built_in">test</span>]$<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>shell命令</title>
    <link href="/2021/09/shell%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/09/shell%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><p>[toc]</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>shell变量名和等号之间不能有空格</p><h3 id="变量的定义与使用"><a href="#变量的定义与使用" class="headerlink" title="变量的定义与使用"></a>变量的定义与使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">your_name=<span class="hljs-string">&quot;qinjx&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$your_name</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;your_name&#125;</span><br></code></pre></td></tr></table></figure><p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界<br>使用未定义的变量，其值为空<br>已定义的变量，可以被重新定义</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-number">1</span>）普通变量的定义，有三种写法<br><br>变量名=value       <span class="hljs-comment">#不加引号时，值里有变量的会被解析后输出。</span><br>变量名=<span class="hljs-string">&#x27;value&#x27;</span>     <span class="hljs-comment">#输出变量内容时单引号里是什么就输出什么，不管什么都原样输出。</span><br>变量名=<span class="hljs-string">&quot;value&quot;</span>    <span class="hljs-comment">#输出变量内容时引号里的变量和命令经过解析后输出。</span><br><span class="hljs-number">2</span>）命令结果作为的变量内容来赋值<br><br>变量名=<span class="hljs-string">`mkdir`</span>    <span class="hljs-comment">#这里是反引号，</span><br>变量名=<span class="hljs-variable">$(</span>mkdir)  <span class="hljs-comment">#把命令$()括起来，来赋值。</span><br></code></pre></td></tr></table></figure><h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span># 是传给脚本的参数个数<br><span class="hljs-meta"><span class="hljs-meta-keyword">$0</span> 是脚本本身的名字</span><br><span class="hljs-meta"><span class="hljs-meta-keyword">$1</span> 是传递给该shell脚本的第一个参数</span><br><span class="hljs-meta"><span class="hljs-meta-keyword">$2</span> 是传递给该shell脚本的第二个参数</span><br><span class="hljs-symbol">$</span>@ 是传给脚本的所有参数的列表<br><span class="hljs-symbol">$</span>* 是以一个单字符串显示所有向脚本传递的参数，与位置变量不同，参数可超过<span class="hljs-number">9</span>个<br><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span> 是脚本运行的当前进程ID号<br><span class="hljs-symbol">$</span>! 获取上一个在后台工作的进程ID号<br><span class="hljs-symbol">$</span>? 是显示最后命令的退出状态，<span class="hljs-number">0</span>表示没有错误，其他表示有错误<br><span class="hljs-symbol">$</span>_ 获取在此之前执行的命令或脚本的最后一个参数<br></code></pre></td></tr></table></figure><h3 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>myUrl=<span class="hljs-string">&quot;http://www.google.com&quot;</span><br><span class="hljs-built_in">readonly</span> myUrl<br>myUrl=<span class="hljs-string">&quot;http://www.runoob.com&quot;</span>   <span class="hljs-comment"># /bin/sh: NAME: This variable is read only.</span><br></code></pre></td></tr></table></figure><h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">unset</span> variable_name<br></code></pre></td></tr></table></figure><h3 id="给变量赋默认值"><a href="#给变量赋默认值" class="headerlink" title="给变量赋默认值"></a>给变量赋默认值</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># tesh.sh</span><br><span class="hljs-attribute">value</span>=<span class="hljs-variable">$&#123;1:-&#x27;defaut value&#x27;&#125;</span>  # Shell读取命令行参数： <span class="hljs-variable">$0</span>是程序名， <span class="hljs-variable">$1</span>是第一个参数， <span class="hljs-variable">$2</span>是第二个参数<span class="hljs-built_in">..</span>.<br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">sh</span> <span class="hljs-keyword">test</span>.<span class="hljs-keyword">sh</span>              # value=&#x27;dafaut value&#x27;<br><span class="hljs-keyword">sh</span> <span class="hljs-keyword">test</span>.<span class="hljs-keyword">sh</span> &#x27;&#x27;           # value=&#x27;dafaut value&#x27;<br><span class="hljs-keyword">sh</span> <span class="hljs-keyword">test</span>.<span class="hljs-keyword">sh</span> &#x27;<span class="hljs-keyword">set</span> value&#x27;  # value=&#x27;<span class="hljs-keyword">set</span> value&#x27;<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span>&#123;<span class="hljs-keyword">parameter</span>:<span class="hljs-literal">-word</span>&#125;      如果<span class="hljs-keyword">parameter</span>的变量值为空或没赋值，则返回word字符串并代替变量的值（变量没定义，返回备用的值，防止变量为空或没定义报错）<br><span class="hljs-variable">$</span>&#123;<span class="hljs-keyword">parameter</span>:=word&#125;      如果<span class="hljs-keyword">parameter</span>的变量值为空或没赋值，。。。同上，（变量没定义为防止出错，找的备胎变量）<br><span class="hljs-variable">$</span>&#123;<span class="hljs-keyword">parameter</span>:?word&#125;      如果<span class="hljs-keyword">parameter</span>的变量值为空或者没赋值，word字符串就作为标准错误输出，否则出书变量的值（捕捉由于变量未定义导致的错误，并退出）<br><span class="hljs-variable">$</span>&#123;<span class="hljs-keyword">parameter</span>:+word&#125;      若果<span class="hljs-keyword">parameter</span>的变量值为空或者未赋值，则什么都不做，否则word字符串将代替变量的值。<br></code></pre></td></tr></table></figure><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>运行shell时，会同时存在三种变量：</p><ol><li><code>局部变量</code> 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</li><li><code>环境变量</code> 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</li><li><code>shell变量</code> shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。</p><h3 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">str</span>=<span class="hljs-string">&#x27;this is a string&#x27;</span><br></code></pre></td></tr></table></figure><p>单引号字符串的限制：</p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li><li>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</li></ul><h3 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">your_name</span>=<span class="hljs-string">&#x27;runoob&#x27;</span><br><span class="hljs-attribute">str</span>=<span class="hljs-string">&quot;Hello, I know you are \&quot;<span class="hljs-variable">$your_name</span>\&quot;! \n&quot;</span><br>echo -e <span class="hljs-variable">$str</span><br><span class="hljs-comment"># Hello, I know you are &quot;runoob&quot;!</span><br></code></pre></td></tr></table></figure><p>双引号的优点：</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">your_name</span>=<span class="hljs-string">&quot;runoob&quot;</span><br><span class="hljs-comment"># 使用双引号拼接</span><br><span class="hljs-attribute">greeting</span>=<span class="hljs-string">&quot;hello, &quot;</span><span class="hljs-variable">$your_name</span><span class="hljs-string">&quot; !&quot;</span><br><span class="hljs-attribute">greeting_1</span>=<span class="hljs-string">&quot;hello, <span class="hljs-variable">$&#123;your_name&#125;</span> !&quot;</span><br>echo <span class="hljs-variable">$greeting</span>  <span class="hljs-variable">$greeting_1</span><br><span class="hljs-comment"># 使用单引号拼接</span><br><span class="hljs-attribute">greeting_2</span>=<span class="hljs-string">&#x27;hello, &#x27;</span><span class="hljs-variable">$your_name</span><span class="hljs-string">&#x27; !&#x27;</span><br><span class="hljs-attribute">greeting_3</span>=<span class="hljs-string">&#x27;hello, $&#123;your_name&#125; !&#x27;</span><br>echo <span class="hljs-variable">$greeting_2</span>  <span class="hljs-variable">$greeting_3</span><br></code></pre></td></tr></table></figure><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">hello, runoob ! hello, runoob !<br>hello, runoob ! hello, $&#123;your_name&#125; !<br></code></pre></td></tr></table></figure><h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">string=<span class="hljs-string">&quot;abcd&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;#string&#125;</span> <span class="hljs-comment">#输出 4</span><br></code></pre></td></tr></table></figure><h3 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">string</span>=<span class="hljs-string">&quot;runoob is a great site&quot;</span><br><span class="hljs-keyword">echo</span> $&#123;<span class="hljs-keyword">string</span>:<span class="hljs-number">1</span>:<span class="hljs-number">4</span>&#125; <span class="hljs-comment"># 输出 unoo</span><br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vala">数组名=(值<span class="hljs-number">1</span> 值<span class="hljs-number">2</span> ... 值n)<br><span class="hljs-meta"># bash支持一维数组（不支持多维数组），并且没有限定数组的大小。</span><br><span class="hljs-meta"># 类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。</span><br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">array</span>_name=(value0 value1 value2 value3)<br>或<br><span class="hljs-built_in">array</span>_name=(<br>value0<br>value1<br>value2<br>value3<br>)<br>或<br><span class="hljs-built_in">array</span>_name[<span class="hljs-number">0</span>]=value0<br><span class="hljs-built_in">array</span>_name[<span class="hljs-number">1</span>]=value1<br><span class="hljs-built_in">array</span>_name[n]=valuen<br># 可以不使用连续的下标，而且下标的范围没有限制<br></code></pre></td></tr></table></figure><h3 id="使用数组"><a href="#使用数组" class="headerlink" title="使用数组"></a>使用数组</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$&#123;数组名[下标]&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">valuen=<span class="hljs-variable">$&#123;array_name[n]&#125;</span><br><span class="hljs-comment"># 使用 @ 符号可以获取数组中的所有元素</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;array_name[@]&#125;</span><br></code></pre></td></tr></table></figure><h3 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 取得数组元素的个数</span><br><span class="hljs-attr">length</span>=<span class="hljs-variable">$&#123;#array_name[@]&#125;</span><br><span class="hljs-comment"># 或者</span><br><span class="hljs-attr">length</span>=<span class="hljs-variable">$&#123;#array_name[*]&#125;</span><br><span class="hljs-comment"># 取得数组单个元素的长度</span><br><span class="hljs-attr">lengthn</span>=<span class="hljs-variable">$&#123;#array_name[n]&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SSH</title>
    <link href="/2021/09/SSH/"/>
    <url>/2021/09/SSH/</url>
    
    <content type="html"><![CDATA[<p>SSH高级技巧介绍。</p><a id="more"></a><p>目录<br>[TOC]</p><h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><h3 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h3><h3 id="远程端口转发"><a href="#远程端口转发" class="headerlink" title="远程端口转发"></a>远程端口转发</h3><h3 id="动态端口转发"><a href="#动态端口转发" class="headerlink" title="动态端口转发"></a>动态端口转发</h3><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><h3 id="ProxyCommand"><a href="#ProxyCommand" class="headerlink" title="ProxyCommand"></a>ProxyCommand</h3><h4 id="client-lt-–-gt-jump-host-lt-–-gt-target-host"><a href="#client-lt-–-gt-jump-host-lt-–-gt-target-host" class="headerlink" title="client &lt;–&gt; jump_host &lt;–&gt; target_host"></a>client &lt;–&gt; jump_host &lt;–&gt; target_host</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs perl">nc &lt;host&gt; &lt;port&gt; 连接host服务器的port端口，标准输入<span class="hljs-number">0</span>发送到host服务器的port端口，从服务器接收的数据写入标准输出<span class="hljs-number">1</span><br><br>ssh -o proxycommand=<span class="hljs-string">&quot;ssh -W %h:%p -p jump_port jump_user@jump_host&quot;</span> -p target_port target_user@target_host<br>%h target_host<br>%p target_port<br><br>ssh -o proxycommand=<span class="hljs-string">&quot;ssh -p jump_port jump_user@jump_host nc %h %p&quot;</span> -p target_port target_user@target_host<br>%h target_host<br>%p target_port<br></code></pre></td></tr></table></figure><h4 id="a-–-gt-b-–-gt-c-–-gt-d"><a href="#a-–-gt-b-–-gt-c-–-gt-d" class="headerlink" title="a –&gt; b –&gt; c –&gt; d"></a>a –&gt; b –&gt; c –&gt; d</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">ssh -o proxycommand=<span class="hljs-string">&quot;ssh -W %h:%p -o proxycommand=\&quot;ssh -W %%h:%%p -p b_port b_user@b_host\&quot; -p c_port c_user@c_host&quot;</span> -p d_port d_user@d_host<br></code></pre></td></tr></table></figure><h3 id="ProxyJump"><a href="#ProxyJump" class="headerlink" title="ProxyJump"></a>ProxyJump</h3><h4 id="a-–-gt-b-–-gt-c"><a href="#a-–-gt-b-–-gt-c" class="headerlink" title="a –&gt; b –&gt; c"></a>a –&gt; b –&gt; c</h4><p>在a上执行如下ssh命令</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">ssh -J b_user<span class="hljs-variable">@b_host</span><span class="hljs-symbol">:b_port</span> -p c_port c_user<span class="hljs-variable">@c_host</span><br></code></pre></td></tr></table></figure><p>例如，a经过b，连接c</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> -J b@[<span class="hljs-number">1</span>::<span class="hljs-number">1</span>]:<span class="hljs-number">22</span> -p <span class="hljs-number">7788</span> c@<span class="hljs-number">2.2.2.2</span><br></code></pre></td></tr></table></figure><p>如果使用密钥认证，b和c都是和a的私钥进行认证。所以，要想免密登陆c，<br>b和c上都要存放a的公钥</p><h4 id="a-–-gt-b-–-gt-c-–-gt-d-1"><a href="#a-–-gt-b-–-gt-c-–-gt-d-1" class="headerlink" title="a –&gt; b –&gt; c –&gt; d"></a>a –&gt; b –&gt; c –&gt; d</h4><p>在a上执行如下ssh命令</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">ssh -J b_user<span class="hljs-variable">@b_host</span><span class="hljs-symbol">:b_port</span>,c_user<span class="hljs-variable">@c_host</span><span class="hljs-symbol">:c_port</span> -p d_port d_user<span class="hljs-variable">@d_host</span><br></code></pre></td></tr></table></figure><p>例如，a经过b和c，连接d</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> -J b@<span class="hljs-number">1.1.1.1:22</span>,c@[<span class="hljs-number">2</span>::<span class="hljs-number">2</span>]:<span class="hljs-number">33</span> -p <span class="hljs-number">7788</span> d@<span class="hljs-number">3.3.3.3</span><br></code></pre></td></tr></table></figure><p>如果使用密钥认证，b，c和d都是和a的私钥进行认证。所以，要想免密登陆d，<br>b，c和d上都要存放a的公钥</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Homebrew</title>
    <link href="/2021/04/Homebrew/"/>
    <url>/2021/04/Homebrew/</url>
    
    <content type="html"><![CDATA[<p>macOS（或 Linux）缺失的软件包的管理器。主要有四个部分组成: brew、homebrew-core 、homebrew-cask、homebrew-bottles。</p><a id="more"></a><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>brew</td><td>Homebrew源代码仓库</td></tr><tr><td>homebrew-core</td><td>Homebrew核心软件源</td></tr><tr><td>homebrew-cask</td><td>提供macos应用和大型二进制文件的安装</td></tr><tr><td>homebrew-bottles</td><td>预编译二进制软件包</td></tr></tbody></table><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>bash -c <span class="hljs-string">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></code></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>一般来说我们可以直接使用 brew install xx 命令安装我们需要的软件包，但也会有一些软件并没有包括在 homebrew 的核心库中，因此我们就需要一个命令来为 homebrew 添加第三方仓库源：brew tap 就是这个命令。</p><p>brew tap 可以将更多存储库添加到 brew 跟踪，更新和安装的列表中。</p><p>注：tap 是 third-party repositories 第三方库的简写</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span>search 软件名 <span class="hljs-comment"># 查询软件</span><br><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>软件名 <span class="hljs-comment"># 安装软件</span><br><span class="hljs-keyword">brew </span>uninstall 软件名 <span class="hljs-comment"># 卸载软件</span><br><span class="hljs-keyword">brew </span>list <span class="hljs-comment"># 查看已经安装的所有软件</span><br><span class="hljs-keyword">brew </span>list 软件名 <span class="hljs-comment"># 查看安装的某个软件的所有位置</span><br><span class="hljs-keyword">brew </span>info <span class="hljs-comment"># 查看安装的软件信息总览</span><br><span class="hljs-keyword">brew </span>info 软件名 <span class="hljs-comment"># 查看某个软件的信息</span><br><span class="hljs-keyword">brew </span>deps 软件名 <span class="hljs-comment"># 列出软件包的依赖</span><br><span class="hljs-keyword">brew </span>update <span class="hljs-comment"># 更新homebrew自身</span><br><span class="hljs-keyword">brew </span>outdated <span class="hljs-comment"># 列出可以更新的软件包</span><br><span class="hljs-keyword">brew </span>upgrade 软件名<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs awk">% brew -v<br>Homebrew <span class="hljs-number">3.0</span>.<span class="hljs-number">4</span><br>Homebrew/homebrew-core (git revision <span class="hljs-number">41328</span>; last commit <span class="hljs-number">2021</span>-<span class="hljs-number">03</span>-<span class="hljs-number">04</span>)<br>Homebrew/homebrew-cask (git revision <span class="hljs-number">2</span>efead2; last commit <span class="hljs-number">2021</span>-<span class="hljs-number">03</span>-<span class="hljs-number">04</span>)<br><br>% brew tap<br>homebrew/cask<br>homebrew/cask-drivers<br>homebrew/cask-fonts<br>homebrew/core<br><br>% brew -h<br>Example usage:<br>  brew search [TEXT|<span class="hljs-regexp">/REGEX/</span>]<br>  brew info [FORMULA...]<br>  brew install FORMULA...<br>  brew update<br>  brew upgrade [FORMULA...]<br>  brew uninstall FORMULA...<br>  brew list [FORMULA...]<br><br>Troubleshooting:<br>  brew config<br>  brew doctor<br>  brew install --verbose --debug FORMULA<br><br>Contributing:<br>  brew create [URL [--no-fetch]]<br>  brew edit [FORMULA...]<br><br>Further help:<br>  brew commands<br>  brew help [COMMAND]<br>  man brew<br>  https:<span class="hljs-regexp">//</span>docs.brew.sh<br><br>% brew config<br>HOMEBREW_VERSION: <span class="hljs-number">3.0</span>.<span class="hljs-number">4</span><br>ORIGIN: https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/git/</span>homebrew/brew.git<br>HEAD: ee52b19179d056f3dd2fdf9c52214d3d51dbb9d9<br>Last commit: <span class="hljs-number">8</span> weeks ago<br>Core tap ORIGIN: https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/git/</span>homebrew/homebrew-core.git<br>Core tap HEAD: <span class="hljs-number">41328788</span>deaa1441ca07b44128b6d2238faeede4<br>Core tap last commit: <span class="hljs-number">8</span> weeks ago<br>Core tap branch: master<br>HOMEBREW_PREFIX: <span class="hljs-regexp">/usr/</span>local<br>HOMEBREW_BOTTLE_DOMAIN: https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn/homebrew-bottles<br>HOMEBREW_CASK_OPTS: []<br>HOMEBREW_DISPLAY: <span class="hljs-regexp">/private/</span>tmp<span class="hljs-regexp">/com.apple.launchd.2XKlnfAA5f/</span>org.macosforge.xquartz:<span class="hljs-number">0</span><br>HOMEBREW_MAKE_JOBS: <span class="hljs-number">8</span><br>Homebrew Ruby: <span class="hljs-number">2.6</span>.<span class="hljs-number">3</span> =&gt; <span class="hljs-regexp">/System/</span>Library<span class="hljs-regexp">/Frameworks/</span>Ruby.framework<span class="hljs-regexp">/Versions/</span><span class="hljs-number">2.6</span><span class="hljs-regexp">/usr/</span>bin/ruby<br>CPU: octa-core <span class="hljs-number">64</span>-bit kabylake<br>Clang: <span class="hljs-number">11.0</span> build <span class="hljs-number">1100</span><br>Git: <span class="hljs-number">2.21</span>.<span class="hljs-number">0</span> =&gt; <span class="hljs-regexp">/Library/</span>Developer<span class="hljs-regexp">/CommandLineTools/u</span>sr<span class="hljs-regexp">/bin/gi</span>t<br>Curl: <span class="hljs-number">7.64</span>.<span class="hljs-number">1</span> =&gt; <span class="hljs-regexp">/usr/</span>bin/curl<br>macOS: <span class="hljs-number">11.2</span>.<span class="hljs-number">2</span>-x86_64<br>CLT: <span class="hljs-number">11.0</span>.<span class="hljs-number">33.16</span><br>Xcode: <span class="hljs-number">12.5</span><br>XQuartz: <span class="hljs-number">2.7</span>.<span class="hljs-number">11</span> =&gt; <span class="hljs-regexp">/opt/</span>X11<br></code></pre></td></tr></table></figure><h1 id="软件源"><a href="#软件源" class="headerlink" title="软件源"></a>软件源</h1><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/</a></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>学习rust</title>
    <link href="/2021/04/%E5%AD%A6%E4%B9%A0rust/"/>
    <url>/2021/04/%E5%AD%A6%E4%B9%A0rust/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="安装rust"><a href="#安装rust" class="headerlink" title="安装rust"></a>安装rust</h2><h3 id="rustup-linux-macos"><a href="#rustup-linux-macos" class="headerlink" title="rustup (linux, macos)"></a>rustup (linux, macos)</h3><p>安装 Rust 的主要方式是通过 Rustup 这一工具，它既是一个 Rust 安装器又是一个版本管理工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --proto <span class="hljs-string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh<br></code></pre></td></tr></table></figure><p>Rust 的升级非常频繁。如果您安装 Rustup 后已有一段时间，那么很可能您的 Rust 版本已经过时了。运行 <code>rustup update</code> 获取最新版本的 Rust。</p><h3 id="Homebrew-macos"><a href="#Homebrew-macos" class="headerlink" title="Homebrew (macos)"></a>Homebrew (macos)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install rust<br></code></pre></td></tr></table></figure><h3 id="Other-Rust-Installation-Methods"><a href="#Other-Rust-Installation-Methods" class="headerlink" title="Other Rust Installation Methods"></a>Other Rust Installation Methods</h3><p><a href="https://forge.rust-lang.org/infra/other-installation-methods.html">https://forge.rust-lang.org/infra/other-installation-methods.html</a></p><h2 id="镜像源配置"><a href="#镜像源配置" class="headerlink" title="镜像源配置"></a>镜像源配置</h2><p>新建~/.cargo/config文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[source.crates-io]</span><br><span class="hljs-attr">replace-with</span> = <span class="hljs-string">&#x27;ustc&#x27;</span><br><br><span class="hljs-section">[source.tuna]</span><br><span class="hljs-attr">registry</span> = <span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git&quot;</span><br><br><span class="hljs-section">[source.ustc]</span><br><span class="hljs-attr">registry</span> = <span class="hljs-string">&quot;https://mirrors.ustc.edu.cn/crates.io-index&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Cargo"><a href="#Cargo" class="headerlink" title="Cargo"></a>Cargo</h2><p>Cargo 是 Rust 的 包管理工具。Cargo 会下载您 Rust 的包依赖项，编译您的包，生成可分发的包，并将它们上传到 crates.io - Rust 社区的包注册表。</p><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">cargo <span class="hljs-keyword">new</span> hello_world <span class="hljs-comment">--bin</span><br></code></pre></td></tr></table></figure><p>我们传递 –bin，是因为我们正在制作一个二进制程序 (默认): 如果我们正在创建一个库 (lib)，我们就会把传递 –lib.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cd hello_world<br>tree .<br>.<br>├── Cargo.toml<br>└── <span class="hljs-attribute">src</span><br>    └── <span class="hljs-selector-tag">main</span>.rs<br><br><span class="hljs-number">1</span> directory, <span class="hljs-number">2</span> files<br></code></pre></td></tr></table></figure><p>这就是我们开始所需要的一切。首先，让我们看看 Cargo.toml:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[package]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;hello_world&quot;</span><br><span class="hljs-attr">version</span> = <span class="hljs-string">&quot;0.1.0&quot;</span><br><span class="hljs-attr">authors</span> = [<span class="hljs-string">&quot;Your Name &lt;you@example.com&gt;&quot;</span>]<br><span class="hljs-attr">edition</span> = <span class="hljs-string">&quot;2018&quot;</span><br><br><span class="hljs-section">[dependencies]</span><br></code></pre></td></tr></table></figure><p>这被称为一个 manifest 元清单，它包含了 Cargo 编译项目所需的所有元数据.</p><p>那 src/main.rs 有啥:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">fn</span> <span class="hljs-selector-tag">main</span>() &#123;<br>    <span class="hljs-selector-tag">println</span>!(<span class="hljs-string">&quot;Hello, world!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>Cargo 为我们创造了一个 “hello_world”. 我们来编译它:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cargo build <span class="hljs-comment"># cargo build --release</span><br>   Compiling hello_world v0.<span class="hljs-number">1.0</span> (file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/project/</span>hello_world)<br></code></pre></td></tr></table></figure><p>然后运行它:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ .<span class="hljs-regexp">/target/</span>debug/hello_world<br>Hello, world!<br></code></pre></td></tr></table></figure><p>我们也可以直接使用<code>cargo run</code>，它会自行编译，然后运行它， 一步到位:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cargo run<br>     Fresh hello_world v0.<span class="hljs-number">1.0</span> (file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/project/</span>hello_world)<br>   Running `target/hello_world`<br>Hello, world!<br></code></pre></td></tr></table></figure><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.<br>├── Cargo.lock<br>├── Cargo.toml<br>├── benches<br>│   └── large-<span class="hljs-selector-tag">input</span>.rs<br>├── examples<br>│   └── simple.rs<br>├── <span class="hljs-attribute">src</span><br>│   ├── bin<br>│   │   └── another_executable.rs<br>│   ├── lib.rs<br>│   └── <span class="hljs-selector-tag">main</span>.rs<br>└── tests<br>    └── some-integration-tests.rs<br></code></pre></td></tr></table></figure><ul><li>Cargo.toml 和 Cargo.lock 存储在项目的根目录中.</li><li>源代码进入 src 目录.</li><li>默认库文件是 src/lib.rs.</li><li>默认的可执行文件是 src/main.rs.</li><li>其他可执行文件，可以放入 src/bin/*.rs.</li><li>集成测试进入 tests 目录 (单元测试进到，正在测试的每个文件中).</li><li>示例进入 examples 目录.</li><li>基准进入 benches 目录.<h2 id="Cargo-toml-与-Cargo-lock"><a href="#Cargo-toml-与-Cargo-lock" class="headerlink" title="Cargo.toml 与 Cargo.lock"></a>Cargo.toml 与 Cargo.lock</h2>Cargo.toml 和 Cargo.lock 各有其目的。在我们谈论它们之前，这是一个总结:</li><li>Cargo.toml 是从广义上描述你的依赖，并由你编写.</li><li>Cargo.lock 包含有关您的依赖项的确切信息。它由 Cargo 维护，不应手动编辑.</li></ul><p>如果您正在构建，其他项目要依赖的库，请将 Cargo.lock 放置在你的.gitignore。如果您正在构建可执行文件，如命令行工具或应用程序，请检查 Cargo.lock 位于 git 管理下。</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs q">cargo <span class="hljs-keyword">update</span>           # updates <span class="hljs-built_in">all</span> dependencies<br>cargo <span class="hljs-keyword">update</span> -p <span class="hljs-built_in">rand</span>   # updates just “<span class="hljs-built_in">rand</span>”<br></code></pre></td></tr></table></figure><h1 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h1><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tp">println<span class="hljs-comment">!(&quot;a is &#123;&#125;, a again is &#123;&#125;&quot;, a, a);</span><br>println<span class="hljs-comment">!(&quot;a is &#123;0&#125;, a again is &#123;0&#125;&quot;, a);</span><br></code></pre></td></tr></table></figure><p>变量</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-keyword">let</span> <span class="hljs-attr">a</span> = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">let</span> mut <span class="hljs-attr">a</span> = <span class="hljs-number">123</span>;<br>const a: <span class="hljs-attr">i32</span> = <span class="hljs-number">123</span>;<br></code></pre></td></tr></table></figure><p>重影与可变变量的赋值不是一个概念，重影是指用同一个名字重新代表另一个变量实体，其类型、可变属性和值都可以变化。但可变变量赋值仅能发生值的变化。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><table><thead><tr><th>位长度</th><th>有符号</th><th>无符号</th></tr></thead><tbody><tr><td>8-bit</td><td>i8</td><td>u8</td></tr><tr><td>16-bit</td><td>i16</td><td>u16</td></tr><tr><td>32-bit</td><td>i32</td><td>u32</td></tr><tr><td>64-bit</td><td>i64</td><td>u64</td></tr><tr><td>128-bit</td><td>i128</td><td>u128</td></tr><tr><td>arch</td><td>isize</td><td>usize</td></tr></tbody></table><p>整数的表述方法有以下几种：<br>| 进制                 | 例          |<br>|———————-|————-|<br>| 十进制               | 98_222      |<br>| 十六进制             | 0xff        |<br>| 八进制               | 0o77        |<br>| 二进制               | 0b1111_0000 |<br>| 字节(只能表示 u8 型) | b’A’        |</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>f32 f64</p><h3 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h3><p>bool</p><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><p>char</p><p>Rust的 char 类型大小为 4 个字节，代表 Unicode标量值，这意味着它可以支持中文，日文和韩文字符等非英文字符甚至表情符号和零宽度空格在 Rust 中都是有效的 char 值。</p><h3 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h3><p>元组用一对 ( ) 包括的一组数据，可以包含不同种类的数据：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> tup: (<span class="hljs-built_in">i32</span>, <span class="hljs-built_in">f64</span>, <span class="hljs-built_in">u8</span>) = (<span class="hljs-number">500</span>, <span class="hljs-number">6.4</span>, <span class="hljs-number">1</span>);<br><span class="hljs-comment">// tup.0 等于 500</span><br><span class="hljs-comment">// tup.1 等于 6.4</span><br><span class="hljs-comment">// tup.2 等于 1</span><br><span class="hljs-keyword">let</span> (x, y, z) = tup;<br><span class="hljs-comment">// y 等于 6.4</span><br></code></pre></td></tr></table></figure><p>数组用一对 [ ] 包括的同类型数据。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-comment">// a 是一个长度为 5 的整型数组</span><br><br><span class="hljs-keyword">let</span> b = [<span class="hljs-string">&quot;January&quot;</span>, <span class="hljs-string">&quot;February&quot;</span>, <span class="hljs-string">&quot;March&quot;</span>];<br><span class="hljs-comment">// b 是一个长度为 3 的字符串数组</span><br><br><span class="hljs-keyword">let</span> c: [<span class="hljs-built_in">i32</span>; <span class="hljs-number">5</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-comment">// c 是一个长度为 5 的 i32 数组</span><br><br><span class="hljs-keyword">let</span> d = [<span class="hljs-number">3</span>; <span class="hljs-number">5</span>];<br><span class="hljs-comment">// 等同于 let d = [3, 3, 3, 3, 3];</span><br><br><span class="hljs-keyword">let</span> first = a[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">let</span> second = a[<span class="hljs-number">1</span>];<br><span class="hljs-comment">// 数组访问</span><br><br>a[<span class="hljs-number">0</span>] = <span class="hljs-number">123</span>; <span class="hljs-comment">// 错误：数组 a 不可变</span><br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>a[<span class="hljs-number">0</span>] = <span class="hljs-number">4</span>; <span class="hljs-comment">// 正确</span><br></code></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// 这是第一种注释方式</span><br><br><span class="hljs-comment">/* 这是第二种注释方式 */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 多行注释</span><br><span class="hljs-comment"> * 多行注释</span><br><span class="hljs-comment"> * 多行注释</span><br><span class="hljs-comment"> */</span><br><br>说明文档<br><span class="hljs-comment">/// Adds one to the number given.</span><br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// # Examples</span><br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// ```</span><br><span class="hljs-comment">/// let x = add(1, 2);</span><br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// ```</span><br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> </span>&lt;函数名&gt; ( &lt;参数&gt; ) -&gt; &lt;返回值&gt; &#123;<br>  &lt;函数体&gt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">add</span></span>(a: <span class="hljs-built_in">i32</span>, b: <span class="hljs-built_in">i32</span>) -&gt; <span class="hljs-built_in">i32</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">five</span></span>() -&gt; <span class="hljs-built_in">i32</span> &#123;<br>        <span class="hljs-number">5</span><br>    &#125;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;five() 的值为: &#123;&#125;&quot;</span>, five());<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 Rust 函数名称的命名风格是小写字母以下划线分割：</p><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nix">fn main() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">a</span> = <span class="hljs-number">12</span>;<br>    <span class="hljs-keyword">let</span> b;<br>    <span class="hljs-keyword">if</span> a &gt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-attr">b</span> = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> a &lt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-attr">b</span> = -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-attr">b</span> = <span class="hljs-number">0</span>;<br>    &#125;<br>    println!(<span class="hljs-string">&quot;b is &#123;&#125;&quot;</span>, b);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">10</span> &#123;<br>    <span class="hljs-comment">// 循环体</span><br>    i += <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fn <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> a = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>];<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a.iter() &#123;<br>        println!(<span class="hljs-string">&quot;值为 : &#123;&#125;&quot;</span>, i);<br>    &#125;<br>&#125;<br>fn <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">let</span> a = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>];<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0.</span><span class="hljs-number">.5</span> &#123;<br>        println!(<span class="hljs-string">&quot;a[&#123;&#125;] = &#123;&#125;&quot;</span>, i, a[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;<br>    <span class="hljs-keyword">let</span> s = [<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> location = <span class="hljs-keyword">loop</span> &#123;<br>        <span class="hljs-keyword">let</span> ch = s[i];<br>        <span class="hljs-keyword">if</span> ch == <span class="hljs-string">&#x27;O&#x27;</span> &#123;<br>            <span class="hljs-keyword">break</span> i;<br>        &#125;<br>        i += <span class="hljs-number">1</span>;<br>    &#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot; \&#x27;O\&#x27; 的索引为 &#123;&#125;&quot;</span>, location);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>打印码流</title>
    <link href="/2021/02/%E6%89%93%E5%8D%B0%E7%A0%81%E6%B5%81/"/>
    <url>/2021/02/%E6%89%93%E5%8D%B0%E7%A0%81%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<p>C语言版码流打印函数</p><a id="more"></a><p>目录<br>[TOC]</p><h2 id="C语言版码流打印函数"><a href="#C语言版码流打印函数" class="headerlink" title="C语言版码流打印函数"></a>C语言版码流打印函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_msg_hex</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *msg, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> msgLen, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *desc)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __BUF_LEN__ 16</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __RED__     <span class="hljs-meta-string">&quot;\e[31m&quot;</span>    <span class="hljs-comment">//前景红色</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __GREEN__   <span class="hljs-meta-string">&quot;\e[32m&quot;</span>    <span class="hljs-comment">//前景绿色</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __RESET__   <span class="hljs-meta-string">&quot;\e[39m&quot;</span>    <span class="hljs-comment">//前景色默认</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __ON_RV__   <span class="hljs-meta-string">&quot;\e[7m&quot;</span>     <span class="hljs-comment">//开启反显</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __OFF_RV__  <span class="hljs-meta-string">&quot;\e[27m&quot;</span>    <span class="hljs-comment">//关闭反显</span></span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> buf[__BUF_LEN__ + <span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> row = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> row_len = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> col = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> graph_num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * delimiter = <span class="hljs-string">&quot; | &quot;</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;----------------------------------------------------------------------\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;desc: %s%s%s\n&quot;</span>, __RED__, desc, __RESET__);<br><br>    row_len = (msgLen / __BUF_LEN__ + ((msgLen % __BUF_LEN__) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>));<br>    row_len = <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-string">&quot;%u&quot;</span>, row_len);<br>    row_len = (<span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-string">&quot;%u&quot;</span>, msgLen) &gt; row_len + <span class="hljs-number">1</span>) ? <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-string">&quot;%u&quot;</span>, msgLen) - <span class="hljs-number">1</span> : row_len;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%*u%s&quot;</span>, __RED__, row_len + <span class="hljs-number">1</span>, msgLen, __RESET__);<br>    col = msgLen &lt; __BUF_LEN__ ? msgLen % __BUF_LEN__ : __BUF_LEN__;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; col; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %-2X&quot;</span>, i);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; msgLen; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i % __BUF_LEN__ == <span class="hljs-number">0</span>)<br>        &#123;<br>            row++;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%*u:&quot;</span>, row_len, row);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// 补充空白</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == row % <span class="hljs-number">2</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, __ON_RV__);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// 补充空白</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != <span class="hljs-built_in">isgraph</span>(msg[i]))<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%02hhx%s&quot;</span>, __GREEN__, msg[i], __RESET__);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%02hhx&quot;</span>, msg[i]);<br>        &#125;<br>        buf[i % __BUF_LEN__] = msg[i];<br><br>        graph_num = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (__BUF_LEN__ - <span class="hljs-number">1</span> == i % __BUF_LEN__)<br>        &#123;<br>            graph_num = __BUF_LEN__;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> == msgLen)<br>        &#123;<br>            graph_num = msgLen % __BUF_LEN__;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (graph_num)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%*s&quot;</span>, (<span class="hljs-number">1</span> == row) ? <span class="hljs-number">0</span> : (__BUF_LEN__ - graph_num) * <span class="hljs-number">3</span>, <span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">//补充空白</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, __OFF_RV__);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, delimiter);<br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; graph_num; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != <span class="hljs-built_in">isgraph</span>(buf[j]))<br>                &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%c%s&quot;</span>, __RED__, buf[j], __RESET__);<br>                    <span class="hljs-comment">//printf(&quot;%c&quot;, buf[j]);</span><br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印效果：</p><img src="/2021/02/%E6%89%93%E5%8D%B0%E7%A0%81%E6%B5%81/%E6%89%93%E5%8D%B0%E7%A0%81%E6%B5%81.png" class="" title="码流打印图片">]]></content>
    
    
    <categories>
      
      <category>代码片段</category>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码片段</tag>
      
      <tag>码流</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git中文乱码</title>
    <link href="/2021/02/git%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    <url>/2021/02/git%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>git在Linux、macOS以及Windows平台下乱码的解决方法。</p><a id="more"></a><p>目录<br>[TOC]</p><h2 id="Linux、Mac-OS-X以及Windows下的Cygwin缺省使用UTF-8字符集"><a href="#Linux、Mac-OS-X以及Windows下的Cygwin缺省使用UTF-8字符集" class="headerlink" title="Linux、Mac OS X以及Windows下的Cygwin缺省使用UTF-8字符集"></a>Linux、Mac OS X以及Windows下的Cygwin缺省使用UTF-8字符集</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global core.quotepath <span class="hljs-literal">false</span> <span class="hljs-comment"># 解决 git status 中文件路径的编码问题</span><br></code></pre></td></tr></table></figure><p>core.quotepath设为false的话，就不会对0x80以上的字符进行quote。中文显示正常。</p><h2 id="Windows平台使用msysGit或者其他平台使用了非UTF-8字符集"><a href="#Windows平台使用msysGit或者其他平台使用了非UTF-8字符集" class="headerlink" title="Windows平台使用msysGit或者其他平台使用了非UTF-8字符集"></a>Windows平台使用msysGit或者其他平台使用了非UTF-8字符集</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global core.quotepath <span class="hljs-literal">false</span> <span class="hljs-comment"># 解决 git status 中文件路径的编码问题</span><br>$ git config --global gui.encoding utf-8 <span class="hljs-comment"># 图形Git GUI界面编码</span><br>$ git config --global i18n.commitencoding utf-8 <span class="hljs-comment"># 提交信息编码,可避免服务器上乱码,同时与linux上的提交保持一致</span><br>$ git config --global i18n.logoutputencoding utf-8 <span class="hljs-comment"># 输出 log 编码</span><br>$ <span class="hljs-built_in">export</span> LESSCHARSET=utf-8 <span class="hljs-comment"># 同时Windows我的电脑添加环境变量</span><br>$ vi /etc/git-completion.bash <span class="hljs-comment"># 新增一行 alias ls=”ls –show-control-chars”</span><br></code></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.worldhello.net/gotgit/08-git-misc/020-git-charset.html">8.1.1. 字符集问题</a></p><p><a href="https://juejin.cn/post/6844903895706107912">常见的三种 git 乱码问题</a></p>]]></content>
    
    
    <categories>
      
      <category>版本管理</category>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>中文乱码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字签名和数字证书</title>
    <link href="/2021/02/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E5%92%8C%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/"/>
    <url>/2021/02/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E5%92%8C%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/</url>
    
    <content type="html"><![CDATA[<p>简单记录数字签名和数字证书的关系</p><a id="more"></a><p>目录<br>[TOC]</p><h1 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h1><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">明文内容</span> --<span class="hljs-comment">摘要算法</span>--&gt; <span class="hljs-comment">摘要明文</span> --<span class="hljs-comment">私钥加密</span>--&gt; <span class="hljs-comment">摘要密文(数字签名)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span>                            <span class="hljs-comment">摘要密码</span> --<span class="hljs-comment">公钥解密</span>--&gt; <span class="hljs-comment">摘要明文</span><br><span class="hljs-comment">明文内容</span> <span class="hljs-literal">+</span> <span class="hljs-comment">摘要密文</span> --<span class="hljs-comment">发送</span>--&gt;                               <span class="hljs-comment">两个摘要明文是否相等？</span><br><span class="hljs-comment"></span>                            <span class="hljs-comment">明文内容</span> --<span class="hljs-comment">摘要算法</span>--&gt; <span class="hljs-comment">摘要明文</span><br></code></pre></td></tr></table></figure><h1 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h1><p>CA信息 + 网站公钥 + 其他信息 <code>--CA私钥进行数字签名--&gt;</code> 网站的CA数字签名</p><p>CA信息 + 网站公钥 + 其他信息 + 网站的CA数字签名 <code>--&gt;</code> 网站数字证书</p><img src="/2021/02/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E5%92%8C%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/%E8%AF%81%E4%B9%A6%E7%BB%84%E6%88%90.png" class="" title="证书组成结构">]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>数字证书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字签名</tag>
      
      <tag>数字证书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/02/hello-world/"/>
    <url>/2021/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>hexo初始化自动生成的第一篇文章。</p><a id="more"></a><p>目录<br>[TOC]</p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><img src="/2021/02/hello-world/hello-world.jpg" class="" title="hello world">]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
